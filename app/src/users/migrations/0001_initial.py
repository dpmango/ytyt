# Generated by Django 3.1.7 on 2021-03-31 19:09

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('courses', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CourseProgress',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('passed_fragments', models.PositiveIntegerField(default=True, verbose_name='Количество пройденных фрагментов')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='courses.course')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True)),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_confirmed', models.BooleanField(default=False)),
                ('avatar', models.ImageField(default='static/default_avatar.jpg', upload_to='avatars', verbose_name='Фотография')),
                ('last_name', models.CharField(max_length=255, null=True, verbose_name='Фамилия')),
                ('first_name', models.CharField(max_length=255, null=True, verbose_name='Имя')),
                ('middle_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Отчество')),
                ('gender', models.PositiveIntegerField(choices=[(1, 'Женский'), (2, 'Мужской'), (0, 'Не определён')], default=0, verbose_name='Пол')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('phone', models.CharField(blank=True, max_length=64, null=True, verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_access_course', models.ManyToManyField(blank=True, related_name='user_access_course_set', related_query_name='user_access_course', to='courses.Course', verbose_name='Доступные курсы')),
                ('user_access_course_lesson', models.ManyToManyField(blank=True, related_name='user_access_course_lesson_set', related_query_name='user_access_course_lesson', to='courses.CourseLesson', verbose_name='Доступные уроки')),
                ('user_access_course_theme', models.ManyToManyField(blank=True, related_name='user_access_course_theme_set', related_query_name='user_access_course_theme', to='courses.CourseTheme', verbose_name='Доступные темы уроков')),
                ('user_course_progress', models.ManyToManyField(related_name='user_access_course_set', related_query_name='user_access_course', to='users.CourseProgress', verbose_name='Доступные курсы')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'abstract': False,
                'swappable': 'AUTH_USER_MODEL',
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
    ]
